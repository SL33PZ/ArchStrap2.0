# Form implementation generated from reading ui file 'lib/window.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
import assets.resource_rc

class MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(700, 450)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/ArchStrapIcon.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("font: 11pt \"Comfortaa\";\n"
"color: rgb(255, 255, 255);")
        self.MainWidget = QtWidgets.QWidget(parent=MainWindow)
        self.MainWidget.setStyleSheet("QWidget#MainWidget {\n"
"    background-image: url(:/15694142_5660786.jpeg);\n"
"}\n"
"\n"
"QWidget {\n"
"    background-color: transparent;\n"
"}\n"
"\n"
"QLineEdit {\n"
"    background-image: url(:/input_field.png);\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"}\n"
"\n"
"QLineEdit::focus {\n"
"    background-image: url(:/input_field.png);\n"
"    border: 1px solid darkgray;\n"
"    border-radius: 3px;\n"
"}\n"
"\n"
"QGroupBox {\n"
"    border: transport;\n"
"}\n"
"\n"
"QComboBox#comboBox_language {\n"
"    background-image: url(:/input_field.png);\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    padding: 1px 18px 1px 3px;\n"
"    min-width: 6em;\n"
"    combobox-popup: 0;\n"
"}\n"
"\n"
"QComboBox#comboBox_timezone {\n"
"    background-image: url(:/input_field.png);\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    padding: 1px 18px 1px 3px;\n"
"    min-width: 6em;\n"
"    combobox-popup: 0;\n"
"}\n"
"\n"
"QComboBox {\n"
"    background-image: url(:/input_field.png);\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    padding: 1px 18px 1px 3px;\n"
"    min-width: 6em;\n"
"    combobox-popup: 1;\n"
"}\n"
"\n"
"\n"
"QComboBox:on {\n"
"    padding-top: 3px;\n"
"    padding-left: 4px;\n"
"    border: transparent;\n"
"}\n"
"\n"
"QComboBox::drop-down {\n"
"    subcontrol-origin: padding;\n"
"    subcontrol-position: top right;\n"
"    width: 15px;\n"
"    border-left-width: 1px;\n"
"    border-left-color: transparent;\n"
"    border-left-style: solid; \n"
"    border-radius: 3px;\n"
"}\n"
"\n"
"QComboBox::down-arrow {\n"
"    image: url(:/down_arrow.png);\n"
"    margin-right: 10px;\n"
"}\n"
"\n"
"QComboBox::down-arrow:on {\n"
"    top: 1px;\n"
"    left: 1px;\n"
"}\n"
"\n"
"QComboBox QAbstractItemView {\n"
"    border: 2px solid darkgray;\n"
"    background-color: rgb(19, 40, 89);\n"
"    selection-background-color: lightgray;\n"
"}\n"
"\n"
"QPushButton::enabled {\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    background-image: url(:/input_field.png);\n"
"}\n"
"\n"
"QPushButton::disabled {\n"
"    border: 1px solid gray;\n"
"    border-radius: 3px;\n"
"    background-image: url(:/input_field_disabled.png);\n"
"}\n"
"\n"
"QTabWidget::pane { \n"
"    border-top: 2px solid rgba(0, 0, 0, 0);\n"
"    position: absolute;\n"
"    top: -0.5em;\n"
"}\n"
"\n"
"QTabWidget::tab-bar {\n"
"    alignment: center;\n"
"}\n"
"\n"
"QTabBar::tab {\n"
"    background: rgba(0, 0, 0, 0);\n"
"    border: 2px solid rgba(0, 0, 0, 0);\n"
"    border-bottom-color: rgba(0, 0, 0, 0); \n"
"    border-top-left-radius: 4px;\n"
"    border-top-right-radius: 4px;\n"
"    min-width: 8ex;\n"
"    padding: 2px;\n"
"}\n"
"\n"
"QTabBar::tab:selected, QTabBar::tab:hover {\n"
"    background: rgba(255, 255, 255, 89)\n"
"}\n"
"\n"
"QTabBar::tab:selected {\n"
"    border-color: #9B9B9B;\n"
"    border-bottom-color: #C2C7CB; \n"
"}\n"
"\n"
"QCheckBox {\n"
"    spacing: 5px;\n"
"}\n"
"\n"
"QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox::indicator:unchecked {\n"
"    image: url(:/checkBox_unchecked.png);\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"    image: url(:/checkBox_checked.png);\n"
"}\n"
"\n"
)
        self.MainWidget.setObjectName("MainWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.MainWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.mainStacked = QtWidgets.QStackedWidget(parent=self.MainWidget)
        self.mainStacked.setStyleSheet("QWidget {\n"
"    background-color: transparent;\n"
"}")
        self.mainStacked.setObjectName("mainStacked")
        self.page_welcome = QtWidgets.QWidget()
        self.page_welcome.setObjectName("page_welcome")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.page_welcome)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        spacerItem = QtWidgets.QSpacerItem(20, 70, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.label_welcome = QtWidgets.QLabel(parent=self.page_welcome)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_welcome.sizePolicy().hasHeightForWidth())
        self.label_welcome.setSizePolicy(sizePolicy)
        self.label_welcome.setMinimumSize(QtCore.QSize(0, 150))
        self.label_welcome.setStyleSheet("image: url(:/label.png);")
        self.label_welcome.setText("")
        self.label_welcome.setObjectName("label_welcome")
        self.verticalLayout_2.addWidget(self.label_welcome)
        spacerItem1 = QtWidgets.QSpacerItem(20, 69, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem1)
        self.pushButton_start = QtWidgets.QPushButton(parent=self.page_welcome)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_start.sizePolicy().hasHeightForWidth())
        self.pushButton_start.setSizePolicy(sizePolicy)
        self.pushButton_start.setMinimumSize(QtCore.QSize(200, 40))
        self.pushButton_start.setMaximumSize(QtCore.QSize(200, 40))
        self.pushButton_start.setStyleSheet("QPushButton {\n"
"    border: 1px solid gray;\n"
"    border-radius: 5px;\n"
"    background-image: url(:/input_field.png);\n"
"}\n"
"\n"
"QPushButton::hover {\n"
"    border: 1px solid darkgray;\n"
"    border-radius: 5px;\n"
"    background-image: url(:/input_field.png);\n"
"}")
        self.pushButton_start.setObjectName("pushButton_start")
        self.verticalLayout_2.addWidget(self.pushButton_start, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        spacerItem2 = QtWidgets.QSpacerItem(20, 70, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem2)
        self.mainStacked.addWidget(self.page_welcome)
        self.page_settings = QtWidgets.QWidget()
        self.page_settings.setObjectName("page_settings")
        self.verticalLayoutWidget = QtWidgets.QWidget(parent=self.page_settings)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 10, 202, 301))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_4.setContentsMargins(0, 15, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.label_language = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label_language.setObjectName("label_language")
        self.verticalLayout_4.addWidget(self.label_language)
        self.comboBox_language = QtWidgets.QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_language.setMinimumSize(QtCore.QSize(131, 25))
        self.comboBox_language.setMaximumSize(QtCore.QSize(200, 25))
        self.comboBox_language.setCurrentText("")
        self.comboBox_language.setMaxCount(999)
        self.comboBox_language.setMinimumContentsLength(2)
        self.comboBox_language.setObjectName("comboBox_language")
        self.verticalLayout_4.addWidget(self.comboBox_language)
        self.label_timezone = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label_timezone.setObjectName("label_timezone")
        self.verticalLayout_4.addWidget(self.label_timezone)
        self.comboBox_timezone = QtWidgets.QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_timezone.setMinimumSize(QtCore.QSize(131, 25))
        self.comboBox_timezone.setMaximumSize(QtCore.QSize(200, 25))
        self.comboBox_timezone.setMaxCount(999)
        self.comboBox_timezone.setMinimumContentsLength(2)
        self.comboBox_timezone.setObjectName("comboBox_timezone")
        self.verticalLayout_4.addWidget(self.comboBox_timezone)
        self.label_desktopEnvironment = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label_desktopEnvironment.setObjectName("label_desktopEnvironment")
        self.verticalLayout_4.addWidget(self.label_desktopEnvironment)
        self.comboBox_desktopEnvironment = QtWidgets.QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_desktopEnvironment.setMinimumSize(QtCore.QSize(131, 25))
        self.comboBox_desktopEnvironment.setMaximumSize(QtCore.QSize(200, 25))
        self.comboBox_desktopEnvironment.setMaxCount(999)
        self.comboBox_desktopEnvironment.setMinimumContentsLength(2)
        self.comboBox_desktopEnvironment.setObjectName("comboBox_desktopEnvironment")
        self.verticalLayout_4.addWidget(self.comboBox_desktopEnvironment)
        self.label_displayManager = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label_displayManager.setObjectName("label_displayManager")
        self.verticalLayout_4.addWidget(self.label_displayManager)
        self.comboBox_displayManager = QtWidgets.QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_displayManager.setMinimumSize(QtCore.QSize(131, 25))
        self.comboBox_displayManager.setMaximumSize(QtCore.QSize(200, 25))
        self.comboBox_displayManager.setMaxCount(999)
        self.comboBox_displayManager.setMinimumContentsLength(2)
        self.comboBox_displayManager.setObjectName("comboBox_displayManager")
        self.verticalLayout_4.addWidget(self.comboBox_displayManager)
        self.label_kernel = QtWidgets.QLabel(parent=self.verticalLayoutWidget)
        self.label_kernel.setObjectName("label_kernel")
        self.verticalLayout_4.addWidget(self.label_kernel)
        self.comboBox_kernel = QtWidgets.QComboBox(parent=self.verticalLayoutWidget)
        self.comboBox_kernel.setMinimumSize(QtCore.QSize(131, 25))
        self.comboBox_kernel.setMaximumSize(QtCore.QSize(200, 25))
        self.comboBox_kernel.setMaxCount(999)
        self.comboBox_kernel.setMinimumContentsLength(2)
        self.comboBox_kernel.setObjectName("comboBox_kernel")
        self.verticalLayout_4.addWidget(self.comboBox_kernel)
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=self.page_settings)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(380, 370, 308, 71))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_exit = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.pushButton_exit.setMinimumSize(QtCore.QSize(125, 30))
        self.pushButton_exit.setMaximumSize(QtCore.QSize(125, 30))
        self.pushButton_exit.setObjectName("pushButton_back")
        self.horizontalLayout.addWidget(self.pushButton_exit)
        self.pushButton_next = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget)
        self.pushButton_next.setMinimumSize(QtCore.QSize(125, 30))
        self.pushButton_next.setMaximumSize(QtCore.QSize(125, 30))
        self.pushButton_next.setObjectName("pushButton_next")
        self.horizontalLayout.addWidget(self.pushButton_next)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(parent=self.page_settings)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(220, 10, 272, 358))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_5.setContentsMargins(0, 9, 0, 0)
        self.verticalLayout_5.setSpacing(1)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.widget = QtWidgets.QWidget(parent=self.verticalLayoutWidget_2)
        self.widget.setObjectName("widget")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.label_hostname = QtWidgets.QLabel(parent=self.widget)
        self.label_hostname.setObjectName("label_hostname")
        self.verticalLayout_6.addWidget(self.label_hostname)
        self.lineEdit_hostname = QtWidgets.QLineEdit(parent=self.widget)
        self.lineEdit_hostname.setMinimumSize(QtCore.QSize(250, 25))
        self.lineEdit_hostname.setMaximumSize(QtCore.QSize(250, 25))
        self.lineEdit_hostname.setMaxLength(12)
        self.lineEdit_hostname.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_hostname.setObjectName("lineEdit_hostname")
        self.verticalLayout_6.addWidget(self.lineEdit_hostname)
        self.label_username = QtWidgets.QLabel(parent=self.widget)
        self.label_username.setObjectName("label_username")
        self.verticalLayout_6.addWidget(self.label_username)
        self.lineEdit_username = QtWidgets.QLineEdit(parent=self.widget)
        self.lineEdit_username.setMinimumSize(QtCore.QSize(250, 25))
        self.lineEdit_username.setMaximumSize(QtCore.QSize(250, 25))
        self.lineEdit_username.setMaxLength(12)
        self.lineEdit_username.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_username.setObjectName("lineEdit_username")
        self.verticalLayout_6.addWidget(self.lineEdit_username)
        self.verticalLayout_5.addWidget(self.widget)
        self.groupBox_2 = QtWidgets.QGroupBox(parent=self.verticalLayoutWidget_2)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_8.setContentsMargins(10, 20, 10, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.lineEdit_upasswd = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.lineEdit_upasswd.setMinimumSize(QtCore.QSize(250, 25))
        self.lineEdit_upasswd.setMaximumSize(QtCore.QSize(250, 25))
        self.lineEdit_upasswd.setMaxLength(16)
        self.lineEdit_upasswd.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.lineEdit_upasswd.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_upasswd.setObjectName("lineEdit_upasswd")
        self.verticalLayout_8.addWidget(self.lineEdit_upasswd)
        self.lineEdit_upasswd_confirm = QtWidgets.QLineEdit(parent=self.groupBox_2)
        self.lineEdit_upasswd_confirm.setMinimumSize(QtCore.QSize(250, 25))
        self.lineEdit_upasswd_confirm.setMaximumSize(QtCore.QSize(250, 25))
        self.lineEdit_upasswd_confirm.setMaxLength(16)
        self.lineEdit_upasswd_confirm.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.lineEdit_upasswd_confirm.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_upasswd_confirm.setObjectName("lineEdit_upasswd_confirm")
        self.verticalLayout_8.addWidget(self.lineEdit_upasswd_confirm)
        self.verticalLayout_5.addWidget(self.groupBox_2)
        self.groupBox_3 = QtWidgets.QGroupBox(parent=self.verticalLayoutWidget_2)
        self.groupBox_3.setObjectName("groupBox_3")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.groupBox_3)
        self.verticalLayout_7.setContentsMargins(10, 20, 10, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.lineEdit_rpasswd = QtWidgets.QLineEdit(parent=self.groupBox_3)
        self.lineEdit_rpasswd.setMinimumSize(QtCore.QSize(250, 25))
        self.lineEdit_rpasswd.setMaximumSize(QtCore.QSize(250, 25))
        self.lineEdit_rpasswd.setMaxLength(16)
        self.lineEdit_rpasswd.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.lineEdit_rpasswd.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_rpasswd.setObjectName("lineEdit_rpasswd")
        self.verticalLayout_7.addWidget(self.lineEdit_rpasswd)
        self.lineEdit_rpasswd_confirm = QtWidgets.QLineEdit(parent=self.groupBox_3)
        self.lineEdit_rpasswd_confirm.setMinimumSize(QtCore.QSize(250, 25))
        self.lineEdit_rpasswd_confirm.setMaximumSize(QtCore.QSize(250, 25))
        self.lineEdit_rpasswd_confirm.setMaxLength(16)
        self.lineEdit_rpasswd_confirm.setEchoMode(QtWidgets.QLineEdit.EchoMode.Password)
        self.lineEdit_rpasswd_confirm.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.lineEdit_rpasswd_confirm.setObjectName("lineEdit_rpasswd_confirm")
        self.verticalLayout_7.addWidget(self.lineEdit_rpasswd_confirm)
        self.verticalLayout_5.addWidget(self.groupBox_3)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(parent=self.page_settings)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(489, 10, 202, 180))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_9.setContentsMargins(0, 19, 0, 0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_efi = QtWidgets.QLabel(parent=self.verticalLayoutWidget_3)
        self.label_efi.setObjectName("label_efi")
        self.verticalLayout_9.addWidget(self.label_efi)
        self.comboBox_efi = QtWidgets.QComboBox(parent=self.verticalLayoutWidget_3)
        self.comboBox_efi.setMinimumSize(QtCore.QSize(131, 25))
        self.comboBox_efi.setMaximumSize(QtCore.QSize(200, 25))
        self.comboBox_efi.setMaxCount(999)
        self.comboBox_efi.setMinimumContentsLength(2)
        self.comboBox_efi.setObjectName("comboBox_efi")
        self.verticalLayout_9.addWidget(self.comboBox_efi)
        self.label_swap = QtWidgets.QLabel(parent=self.verticalLayoutWidget_3)
        self.label_swap.setObjectName("label_swap")
        self.verticalLayout_9.addWidget(self.label_swap)
        self.comboBox_swap = QtWidgets.QComboBox(parent=self.verticalLayoutWidget_3)
        self.comboBox_swap.setMinimumSize(QtCore.QSize(131, 25))
        self.comboBox_swap.setMaximumSize(QtCore.QSize(200, 25))
        self.comboBox_swap.setMaxCount(999)
        self.comboBox_swap.setMinimumContentsLength(2)
        self.comboBox_swap.setObjectName("comboBox_swap")
        self.verticalLayout_9.addWidget(self.comboBox_swap)
        self.label_root = QtWidgets.QLabel(parent=self.verticalLayoutWidget_3)
        self.label_root.setObjectName("label_root")
        self.verticalLayout_9.addWidget(self.label_root)
        self.comboBox_root = QtWidgets.QComboBox(parent=self.verticalLayoutWidget_3)
        self.comboBox_root.setMinimumSize(QtCore.QSize(131, 25))
        self.comboBox_root.setMaximumSize(QtCore.QSize(200, 25))
        self.comboBox_root.setMaxCount(999)
        self.comboBox_root.setMinimumContentsLength(2)
        self.comboBox_root.setObjectName("comboBox_root")
        self.verticalLayout_9.addWidget(self.comboBox_root)
        self.mainStacked.addWidget(self.page_settings)
        self.page_optionals = QtWidgets.QWidget()
        self.page_optionals.setObjectName("page_optionals")
        self.tabWidget = QtWidgets.QTabWidget(parent=self.page_optionals)
        self.tabWidget.setGeometry(QtCore.QRect(130, 20, 467, 274))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.TabPosition.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.tabWidget.setIconSize(QtCore.QSize(32, 32))
        self.tabWidget.setObjectName("tabWidget")
        self.tab_network = QtWidgets.QWidget()
        self.tab_network.setObjectName("tab_network")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.tab_network)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.gridWidget = QtWidgets.QWidget(parent=self.tab_network)
        self.gridWidget.setObjectName("gridWidget")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.gridWidget)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.widget_3 = QtWidgets.QWidget(parent=self.gridWidget)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.widget_3)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.checkBox_chrome = QtWidgets.QCheckBox(parent=self.widget_3)
        self.checkBox_chrome.setObjectName("checkBox_chrome")
        self.verticalLayout_11.addWidget(self.checkBox_chrome)
        self.checkBox_jdownloader = QtWidgets.QCheckBox(parent=self.widget_3)
        self.checkBox_jdownloader.setObjectName("checkBox_jdownloader")
        self.verticalLayout_11.addWidget(self.checkBox_jdownloader)
        self.checkBox_openvpn = QtWidgets.QCheckBox(parent=self.widget_3)
        self.checkBox_openvpn.setObjectName("checkBox_openvpn")
        self.verticalLayout_11.addWidget(self.checkBox_openvpn)
        self.checkBox_trojan = QtWidgets.QCheckBox(parent=self.widget_3)
        self.checkBox_trojan.setObjectName("checkBox_trojan")
        self.verticalLayout_11.addWidget(self.checkBox_trojan)
        self.checkBox_v2ray = QtWidgets.QCheckBox(parent=self.widget_3)
        self.checkBox_v2ray.setObjectName("checkBox_v2ray")
        self.verticalLayout_11.addWidget(self.checkBox_v2ray)
        self.horizontalLayout_3.addWidget(self.widget_3, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_4 = QtWidgets.QWidget(parent=self.gridWidget)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.widget_4)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.checkBox_freenet = QtWidgets.QCheckBox(parent=self.widget_4)
        self.checkBox_freenet.setObjectName("checkBox_freenet")
        self.verticalLayout_12.addWidget(self.checkBox_freenet)
        self.checkBox_lokinet = QtWidgets.QCheckBox(parent=self.widget_4)
        self.checkBox_lokinet.setObjectName("checkBox_lokinet")
        self.verticalLayout_12.addWidget(self.checkBox_lokinet)
        self.checkBox_thorium = QtWidgets.QCheckBox(parent=self.widget_4)
        self.checkBox_thorium.setObjectName("checkBox_thorium")
        self.verticalLayout_12.addWidget(self.checkBox_thorium)
        self.checkBox_tuntox = QtWidgets.QCheckBox(parent=self.widget_4)
        self.checkBox_tuntox.setObjectName("checkBox_tuntox")
        self.verticalLayout_12.addWidget(self.checkBox_tuntox)
        self.checkBox_wireguard = QtWidgets.QCheckBox(parent=self.widget_4)
        self.checkBox_wireguard.setObjectName("checkBox_wireguard")
        self.verticalLayout_12.addWidget(self.checkBox_wireguard)
        self.horizontalLayout_3.addWidget(self.widget_4, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_2 = QtWidgets.QWidget(parent=self.gridWidget)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.checkBox_httperf = QtWidgets.QCheckBox(parent=self.widget_2)
        self.checkBox_httperf.setObjectName("checkBox_httperf")
        self.verticalLayout_10.addWidget(self.checkBox_httperf)
        self.checkBox_motrix = QtWidgets.QCheckBox(parent=self.widget_2)
        self.checkBox_motrix.setObjectName("checkBox_motrix")
        self.verticalLayout_10.addWidget(self.checkBox_motrix)
        self.checkBox_tor = QtWidgets.QCheckBox(parent=self.widget_2)
        self.checkBox_tor.setObjectName("checkBox_tor")
        self.verticalLayout_10.addWidget(self.checkBox_tor)
        self.checkBox_vegeta = QtWidgets.QCheckBox(parent=self.widget_2)
        self.checkBox_vegeta.setObjectName("checkBox_vegeta")
        self.verticalLayout_10.addWidget(self.checkBox_vegeta)
        self.checkBox_6tunnel = QtWidgets.QCheckBox(parent=self.widget_2)
        self.checkBox_6tunnel.setObjectName("checkBox_6tunnel")
        self.verticalLayout_10.addWidget(self.checkBox_6tunnel)
        self.horizontalLayout_3.addWidget(self.widget_2, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_5.addWidget(self.gridWidget)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/network.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tabWidget.addTab(self.tab_network, icon1, "")
        self.tab_security = QtWidgets.QWidget()
        self.tab_security.setObjectName("tab_security")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.tab_security)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.gridWidget_2 = QtWidgets.QWidget(parent=self.tab_security)
        self.gridWidget_2.setObjectName("gridWidget_2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.gridWidget_2)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.widget_8 = QtWidgets.QWidget(parent=self.gridWidget_2)
        self.widget_8.setObjectName("widget_8")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.widget_8)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.checkBox_aide = QtWidgets.QCheckBox(parent=self.widget_8)
        self.checkBox_aide.setObjectName("checkBox_aide")
        self.verticalLayout_16.addWidget(self.checkBox_aide)
        self.checkBox_gnupg = QtWidgets.QCheckBox(parent=self.widget_8)
        self.checkBox_gnupg.setObjectName("checkBox_gnupg")
        self.verticalLayout_16.addWidget(self.checkBox_gnupg)
        self.checkBox_metaplsoit = QtWidgets.QCheckBox(parent=self.widget_8)
        self.checkBox_metaplsoit.setObjectName("checkBox_metaplsoit")
        self.verticalLayout_16.addWidget(self.checkBox_metaplsoit)
        self.checkBox_ossec = QtWidgets.QCheckBox(parent=self.widget_8)
        self.checkBox_ossec.setObjectName("checkBox_ossec")
        self.verticalLayout_16.addWidget(self.checkBox_ossec)
        self.checkBox_snort = QtWidgets.QCheckBox(parent=self.widget_8)
        self.checkBox_snort.setObjectName("checkBox_snort")
        self.verticalLayout_16.addWidget(self.checkBox_snort)
        self.checkBox_tiger = QtWidgets.QCheckBox(parent=self.widget_8)
        self.checkBox_tiger.setObjectName("checkBox_tiger")
        self.verticalLayout_16.addWidget(self.checkBox_tiger)
        self.checkBox_zeek = QtWidgets.QCheckBox(parent=self.widget_8)
        self.checkBox_zeek.setObjectName("checkBox_zeek")
        self.verticalLayout_16.addWidget(self.checkBox_zeek)
        self.horizontalLayout_6.addWidget(self.widget_8, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_9 = QtWidgets.QWidget(parent=self.gridWidget_2)
        self.widget_9.setObjectName("widget_9")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.widget_9)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.checkBox_bitwarden = QtWidgets.QCheckBox(parent=self.widget_9)
        self.checkBox_bitwarden.setObjectName("checkBox_bitwarden")
        self.verticalLayout_17.addWidget(self.checkBox_bitwarden)
        self.checkBox_kgpg = QtWidgets.QCheckBox(parent=self.widget_9)
        self.checkBox_kgpg.setObjectName("checkBox_kgpg")
        self.verticalLayout_17.addWidget(self.checkBox_kgpg)
        self.checkBox_ngrep = QtWidgets.QCheckBox(parent=self.widget_9)
        self.checkBox_ngrep.setObjectName("checkBox_ngrep")
        self.verticalLayout_17.addWidget(self.checkBox_ngrep)
        self.checkBox_rootkit = QtWidgets.QCheckBox(parent=self.widget_9)
        self.checkBox_rootkit.setObjectName("checkBox_rootkit")
        self.verticalLayout_17.addWidget(self.checkBox_rootkit)
        self.checkBox_sshGuard = QtWidgets.QCheckBox(parent=self.widget_9)
        self.checkBox_sshGuard.setObjectName("checkBox_sshGuard")
        self.verticalLayout_17.addWidget(self.checkBox_sshGuard)
        self.checkBox_wireshark = QtWidgets.QCheckBox(parent=self.widget_9)
        self.checkBox_wireshark.setObjectName("checkBox_wireshark")
        self.verticalLayout_17.addWidget(self.checkBox_wireshark)
        self.horizontalLayout_6.addWidget(self.widget_9, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_10 = QtWidgets.QWidget(parent=self.gridWidget_2)
        self.widget_10.setObjectName("widget_10")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.widget_10)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.checkBox_clamav = QtWidgets.QCheckBox(parent=self.widget_10)
        self.checkBox_clamav.setObjectName("checkBox_clamav")
        self.verticalLayout_18.addWidget(self.checkBox_clamav)
        self.checkBox_masshash = QtWidgets.QCheckBox(parent=self.widget_10)
        self.checkBox_masshash.setObjectName("checkBox_masshash")
        self.verticalLayout_18.addWidget(self.checkBox_masshash)
        self.checkBox_nmap = QtWidgets.QCheckBox(parent=self.widget_10)
        self.checkBox_nmap.setObjectName("checkBox_nmap")
        self.verticalLayout_18.addWidget(self.checkBox_nmap)
        self.checkBox_scrypt = QtWidgets.QCheckBox(parent=self.widget_10)
        self.checkBox_scrypt.setObjectName("checkBox_scrypt")
        self.verticalLayout_18.addWidget(self.checkBox_scrypt)
        self.checkBox_steghide = QtWidgets.QCheckBox(parent=self.widget_10)
        self.checkBox_steghide.setObjectName("checkBox_steghide")
        self.verticalLayout_18.addWidget(self.checkBox_steghide)
        self.checkBox_xplico = QtWidgets.QCheckBox(parent=self.widget_10)
        self.checkBox_xplico.setObjectName("checkBox_xplico")
        self.verticalLayout_18.addWidget(self.checkBox_xplico)
        self.horizontalLayout_6.addWidget(self.widget_10, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_10.addWidget(self.gridWidget_2)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/security.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tabWidget.addTab(self.tab_security, icon2, "")
        self.tab_docs = QtWidgets.QWidget()
        self.tab_docs.setObjectName("tab_docs")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.tab_docs)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.gridWidget_3 = QtWidgets.QWidget(parent=self.tab_docs)
        self.gridWidget_3.setObjectName("gridWidget_3")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.gridWidget_3)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.widget_11 = QtWidgets.QWidget(parent=self.gridWidget_3)
        self.widget_11.setObjectName("widget_11")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.widget_11)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.checkBox_abiword = QtWidgets.QCheckBox(parent=self.widget_11)
        self.checkBox_abiword.setObjectName("checkBox_abiword")
        self.verticalLayout_19.addWidget(self.checkBox_abiword)
        self.checkBox_gscan2pdf = QtWidgets.QCheckBox(parent=self.widget_11)
        self.checkBox_gscan2pdf.setObjectName("checkBox_gscan2pdf")
        self.verticalLayout_19.addWidget(self.checkBox_gscan2pdf)
        self.checkBox_onlyoffice = QtWidgets.QCheckBox(parent=self.widget_11)
        self.checkBox_onlyoffice.setObjectName("checkBox_onlyoffice")
        self.verticalLayout_19.addWidget(self.checkBox_onlyoffice)
        self.checkBox_xmind = QtWidgets.QCheckBox(parent=self.widget_11)
        self.checkBox_xmind.setObjectName("checkBox_xmond")
        self.verticalLayout_19.addWidget(self.checkBox_xmind)
        self.horizontalLayout_7.addWidget(self.widget_11, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_12 = QtWidgets.QWidget(parent=self.gridWidget_3)
        self.widget_12.setObjectName("widget_12")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.widget_12)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.checkBox_cherrytree = QtWidgets.QCheckBox(parent=self.widget_12)
        self.checkBox_cherrytree.setObjectName("checkBox_cherrytree")
        self.verticalLayout_20.addWidget(self.checkBox_cherrytree)
        self.checkBox_marktext = QtWidgets.QCheckBox(parent=self.widget_12)
        self.checkBox_marktext.setObjectName("checkBox_marktext")
        self.verticalLayout_20.addWidget(self.checkBox_marktext)
        self.checkBox_texstudio = QtWidgets.QCheckBox(parent=self.widget_12)
        self.checkBox_texstudio.setObjectName("checkBox_texstudio")
        self.verticalLayout_20.addWidget(self.checkBox_texstudio)
        self.horizontalLayout_7.addWidget(self.widget_12, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_13 = QtWidgets.QWidget(parent=self.gridWidget_3)
        self.widget_13.setObjectName("widget_13")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.widget_13)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.checkBox_geany = QtWidgets.QCheckBox(parent=self.widget_13)
        self.checkBox_geany.setObjectName("checkBox_geany")
        self.verticalLayout_21.addWidget(self.checkBox_geany)
        self.checkBox_micro = QtWidgets.QCheckBox(parent=self.widget_13)
        self.checkBox_micro.setObjectName("checkBox_micro")
        self.verticalLayout_21.addWidget(self.checkBox_micro)
        self.checkBox_tikzit = QtWidgets.QCheckBox(parent=self.widget_13)
        self.checkBox_tikzit.setObjectName("checkBox_tikzit")
        self.verticalLayout_21.addWidget(self.checkBox_tikzit)
        self.horizontalLayout_7.addWidget(self.widget_13, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_11.addWidget(self.gridWidget_3)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/docs.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tabWidget.addTab(self.tab_docs, icon3, "")
        self.tab_multimedia = QtWidgets.QWidget()
        self.tab_multimedia.setObjectName("tab_multimedia")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.tab_multimedia)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.gridWidget_4 = QtWidgets.QWidget(parent=self.tab_multimedia)
        self.gridWidget_4.setObjectName("gridWidget_4")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.gridWidget_4)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.widget_14 = QtWidgets.QWidget(parent=self.gridWidget_4)
        self.widget_14.setObjectName("widget_14")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.widget_14)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.checkBox_birdfont = QtWidgets.QCheckBox(parent=self.widget_14)
        self.checkBox_birdfont.setObjectName("checkBox_birdfont")
        self.verticalLayout_22.addWidget(self.checkBox_birdfont)
        self.checkBox_figma = QtWidgets.QCheckBox(parent=self.widget_14)
        self.checkBox_figma.setObjectName("checkBox_figma")
        self.verticalLayout_22.addWidget(self.checkBox_figma)
        self.checkBox_imageMagick = QtWidgets.QCheckBox(parent=self.widget_14)
        self.checkBox_imageMagick.setObjectName("checkBox_imageMagick")
        self.verticalLayout_22.addWidget(self.checkBox_imageMagick)
        self.checkBox_nomacs = QtWidgets.QCheckBox(parent=self.widget_14)
        self.checkBox_nomacs.setObjectName("checkBox_nomacs")
        self.verticalLayout_22.addWidget(self.checkBox_nomacs)
        self.checkBox_waifu2x = QtWidgets.QCheckBox(parent=self.widget_14)
        self.checkBox_waifu2x.setObjectName("checkBox_wifu2x")
        self.verticalLayout_22.addWidget(self.checkBox_waifu2x)
        self.horizontalLayout_8.addWidget(self.widget_14, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_15 = QtWidgets.QWidget(parent=self.gridWidget_4)
        self.widget_15.setObjectName("widget_15")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout(self.widget_15)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.checkBox_blender = QtWidgets.QCheckBox(parent=self.widget_15)
        self.checkBox_blender.setObjectName("checkBox_blender")
        self.verticalLayout_23.addWidget(self.checkBox_blender)
        self.checkBox_gimp = QtWidgets.QCheckBox(parent=self.widget_15)
        self.checkBox_gimp.setObjectName("checkBox_gimp")
        self.verticalLayout_23.addWidget(self.checkBox_gimp)
        self.checkBox_impgg = QtWidgets.QCheckBox(parent=self.widget_15)
        self.checkBox_impgg.setObjectName("checkBox_impgg")
        self.verticalLayout_23.addWidget(self.checkBox_impgg)
        self.checkBox_snappy = QtWidgets.QCheckBox(parent=self.widget_15)
        self.checkBox_snappy.setObjectName("checkBox_snappy")
        self.verticalLayout_23.addWidget(self.checkBox_snappy)
        self.horizontalLayout_8.addWidget(self.widget_15, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_16 = QtWidgets.QWidget(parent=self.gridWidget_4)
        self.widget_16.setObjectName("widget_16")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout(self.widget_16)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.checkBox_coulr = QtWidgets.QCheckBox(parent=self.widget_16)
        self.checkBox_coulr.setObjectName("checkBox_coulr")
        self.verticalLayout_24.addWidget(self.checkBox_coulr)
        self.checkBox_gwenview = QtWidgets.QCheckBox(parent=self.widget_16)
        self.checkBox_gwenview.setObjectName("checkBox_gwenview")
        self.verticalLayout_24.addWidget(self.checkBox_gwenview)
        self.checkBox_inkscape = QtWidgets.QCheckBox(parent=self.widget_16)
        self.checkBox_inkscape.setToolTip("")
        self.checkBox_inkscape.setObjectName("checkBox_inkscape")
        self.verticalLayout_24.addWidget(self.checkBox_inkscape)
        self.checkBox_synfig = QtWidgets.QCheckBox(parent=self.widget_16)
        self.checkBox_synfig.setObjectName("checkBox_synfig")
        self.verticalLayout_24.addWidget(self.checkBox_synfig)
        self.horizontalLayout_8.addWidget(self.widget_16, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_12.addWidget(self.gridWidget_4)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/multimedia.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tabWidget.addTab(self.tab_multimedia, icon4, "")
        self.tab_utilities = QtWidgets.QWidget()
        self.tab_utilities.setObjectName("tab_utilities")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.tab_utilities)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.gridWidget_5 = QtWidgets.QWidget(parent=self.tab_utilities)
        self.gridWidget_5.setObjectName("gridWidget_5")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.gridWidget_5)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.widget_17 = QtWidgets.QWidget(parent=self.gridWidget_5)
        self.widget_17.setObjectName("widget_17")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout(self.widget_17)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.checkBox_bazel = QtWidgets.QCheckBox(parent=self.widget_17)
        self.checkBox_bazel.setObjectName("checkBox_bazel")
        self.verticalLayout_25.addWidget(self.checkBox_bazel)
        self.checkBox_fontManager = QtWidgets.QCheckBox(parent=self.widget_17)
        self.checkBox_fontManager.setObjectName("checkBox_fontManager")
        self.verticalLayout_25.addWidget(self.checkBox_fontManager)
        self.checkBox_kitty = QtWidgets.QCheckBox(parent=self.widget_17)
        self.checkBox_kitty.setObjectName("checkBox_kitty")
        self.verticalLayout_25.addWidget(self.checkBox_kitty)
        self.checkBox_miniconda = QtWidgets.QCheckBox(parent=self.widget_17)
        self.checkBox_miniconda.setObjectName("checkBox_miniconda")
        self.verticalLayout_25.addWidget(self.checkBox_miniconda)
        self.checkBox_okular = QtWidgets.QCheckBox(parent=self.widget_17)
        self.checkBox_okular.setObjectName("checkBox_okular")
        self.verticalLayout_25.addWidget(self.checkBox_okular)
        self.checkBox_vscode = QtWidgets.QCheckBox(parent=self.widget_17)
        self.checkBox_vscode.setObjectName("checkBox_vscode")
        self.verticalLayout_25.addWidget(self.checkBox_vscode)
        self.horizontalLayout_9.addWidget(self.widget_17, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_18 = QtWidgets.QWidget(parent=self.gridWidget_5)
        self.widget_18.setObjectName("widget_18")
        self.verticalLayout_26 = QtWidgets.QVBoxLayout(self.widget_18)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.checkBox_cairo = QtWidgets.QCheckBox(parent=self.widget_18)
        self.checkBox_cairo.setObjectName("checkBox_cairo")
        self.verticalLayout_26.addWidget(self.checkBox_cairo)
        self.checkBox_gparted = QtWidgets.QCheckBox(parent=self.widget_18)
        self.checkBox_gparted.setObjectName("checkBox_gparted")
        self.verticalLayout_26.addWidget(self.checkBox_gparted)
        self.checkBox_krusader = QtWidgets.QCheckBox(parent=self.widget_18)
        self.checkBox_krusader.setObjectName("checkBox_krusader")
        self.verticalLayout_26.addWidget(self.checkBox_krusader)
        self.checkBox_meson = QtWidgets.QCheckBox(parent=self.widget_18)
        self.checkBox_meson.setObjectName("checkBox_meson")
        self.verticalLayout_26.addWidget(self.checkBox_meson)
        self.checkBox_rsync = QtWidgets.QCheckBox(parent=self.widget_18)
        self.checkBox_rsync.setObjectName("checkBox_rsync")
        self.verticalLayout_26.addWidget(self.checkBox_rsync)
        self.checkBox_NPM = QtWidgets.QCheckBox(parent=self.widget_18)
        self.checkBox_NPM.setObjectName("checkBox_NPM")
        self.verticalLayout_26.addWidget(self.checkBox_NPM)
        self.horizontalLayout_9.addWidget(self.widget_18, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.widget_19 = QtWidgets.QWidget(parent=self.gridWidget_5)
        self.widget_19.setObjectName("widget_19")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout(self.widget_19)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.checkBox_dolphin = QtWidgets.QCheckBox(parent=self.widget_19)
        self.checkBox_dolphin.setObjectName("checkBox_dolphin")
        self.verticalLayout_27.addWidget(self.checkBox_dolphin)
        self.checkBox_gradle = QtWidgets.QCheckBox(parent=self.widget_19)
        self.checkBox_gradle.setObjectName("checkBox_gradle")
        self.verticalLayout_27.addWidget(self.checkBox_gradle)
        self.checkBox_latteDock = QtWidgets.QCheckBox(parent=self.widget_19)
        self.checkBox_latteDock.setObjectName("checkBox_latteDock")
        self.verticalLayout_27.addWidget(self.checkBox_latteDock)
        self.checkBox_ohMyZsh = QtWidgets.QCheckBox(parent=self.widget_19)
        self.checkBox_ohMyZsh.setObjectName("checkBox_ohMyZsh")
        self.verticalLayout_27.addWidget(self.checkBox_ohMyZsh)
        self.checkBox_vmware = QtWidgets.QCheckBox(parent=self.widget_19)
        self.checkBox_vmware.setObjectName("checkBox_vmware")
        self.verticalLayout_27.addWidget(self.checkBox_vmware)
        self.checkBox_onedrive = QtWidgets.QCheckBox(parent=self.widget_19)
        self.checkBox_onedrive.setObjectName("checkBox_zsh")
        self.verticalLayout_27.addWidget(self.checkBox_onedrive)
        self.horizontalLayout_9.addWidget(self.widget_19, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout_13.addWidget(self.gridWidget_5)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/tools.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.tabWidget.addTab(self.tab_utilities, icon5, "")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(parent=self.page_optionals)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(380, 370, 308, 71))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_back2 = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_2)
        self.pushButton_back2.setMinimumSize(QtCore.QSize(125, 30))
        self.pushButton_back2.setMaximumSize(QtCore.QSize(125, 30))
        self.pushButton_back2.setObjectName("pushButton_back2")
        self.horizontalLayout_2.addWidget(self.pushButton_back2)
        self.pushButton_next2 = QtWidgets.QPushButton(parent=self.horizontalLayoutWidget_2)
        self.pushButton_next2.setMinimumSize(QtCore.QSize(125, 30))
        self.pushButton_next2.setMaximumSize(QtCore.QSize(125, 30))
        self.pushButton_next2.setObjectName("pushButton_next2")
        self.horizontalLayout_2.addWidget(self.pushButton_next2)
        self.mainStacked.addWidget(self.page_optionals)
        self.page_process = QtWidgets.QWidget()
        self.page_process.setObjectName("page_process")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.page_process)
        self.verticalLayout_3.setContentsMargins(25, 25, 25, 25)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        spacerItem3 = QtWidgets.QSpacerItem(20, 167, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_3.addItem(spacerItem3)
        spacerItem4 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_3.addItem(spacerItem4)
        self.logView = QtWidgets.QListView(parent=self.page_process)
        self.logView.setStyleSheet("background-color: rgb(19, 40, 89);\n"
"border: 1px solid darkgray;\n"
"border-radius: 6px;")
        self.logView.setEditTriggers(QtWidgets.QAbstractItemView.EditTrigger.NoEditTriggers)
        self.logView.setProperty("showDropIndicator", False)
        self.logView.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.NoSelection)
        self.logView.setObjectName("logView")
        self.verticalLayout_3.addWidget(self.logView)
        spacerItem5 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_3.addItem(spacerItem5)
        self.pushButton_finish = QtWidgets.QPushButton(parent=self.page_process)
        self.pushButton_finish.setEnabled(False)
        self.pushButton_finish.setMinimumSize(QtCore.QSize(125, 35))
        self.pushButton_finish.setMaximumSize(QtCore.QSize(125, 35))
        self.pushButton_finish.setObjectName("pushButton_finish")
        self.verticalLayout_3.addWidget(self.pushButton_finish, 0, QtCore.Qt.AlignmentFlag.AlignHCenter)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_3.addItem(spacerItem6)
        self.mainStacked.addWidget(self.page_process)
        self.verticalLayout.addWidget(self.mainStacked)
        MainWindow.setCentralWidget(self.MainWidget)
        self.label_welcome.setBuddy(self.pushButton_start)
        self.label_language.setBuddy(self.comboBox_language)
        self.label_timezone.setBuddy(self.comboBox_timezone)
        self.label_desktopEnvironment.setBuddy(self.comboBox_desktopEnvironment)
        self.label_displayManager.setBuddy(self.comboBox_displayManager)
        self.label_kernel.setBuddy(self.comboBox_kernel)
        self.label_hostname.setBuddy(self.lineEdit_hostname)
        self.label_username.setBuddy(self.lineEdit_username)
        self.label_efi.setBuddy(self.comboBox_efi)
        self.label_swap.setBuddy(self.comboBox_swap)
        self.label_root.setBuddy(self.comboBox_root)

        self.retranslateUi(MainWindow)
        self.mainStacked.setCurrentIndex(0)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.pushButton_start, self.comboBox_language)
        MainWindow.setTabOrder(self.comboBox_language, self.comboBox_timezone)
        MainWindow.setTabOrder(self.comboBox_timezone, self.comboBox_desktopEnvironment)
        MainWindow.setTabOrder(self.comboBox_desktopEnvironment, self.comboBox_displayManager)
        MainWindow.setTabOrder(self.comboBox_displayManager, self.comboBox_kernel)
        MainWindow.setTabOrder(self.comboBox_kernel, self.lineEdit_hostname)
        MainWindow.setTabOrder(self.lineEdit_hostname, self.lineEdit_username)
        MainWindow.setTabOrder(self.lineEdit_username, self.lineEdit_upasswd)
        MainWindow.setTabOrder(self.lineEdit_upasswd, self.lineEdit_upasswd_confirm)
        MainWindow.setTabOrder(self.lineEdit_upasswd_confirm, self.lineEdit_rpasswd)
        MainWindow.setTabOrder(self.lineEdit_rpasswd, self.lineEdit_rpasswd_confirm)
        MainWindow.setTabOrder(self.lineEdit_rpasswd_confirm, self.comboBox_efi)
        MainWindow.setTabOrder(self.comboBox_efi, self.comboBox_swap)
        MainWindow.setTabOrder(self.comboBox_swap, self.comboBox_root)
        MainWindow.setTabOrder(self.comboBox_root, self.pushButton_exit)
        MainWindow.setTabOrder(self.pushButton_exit, self.pushButton_next)
        MainWindow.setTabOrder(self.pushButton_next, self.tabWidget)
        MainWindow.setTabOrder(self.tabWidget, self.checkBox_chrome)
        MainWindow.setTabOrder(self.checkBox_chrome, self.checkBox_jdownloader)
        MainWindow.setTabOrder(self.checkBox_jdownloader, self.checkBox_openvpn)
        MainWindow.setTabOrder(self.checkBox_openvpn, self.checkBox_trojan)
        MainWindow.setTabOrder(self.checkBox_trojan, self.checkBox_v2ray)
        MainWindow.setTabOrder(self.checkBox_v2ray, self.checkBox_freenet)
        MainWindow.setTabOrder(self.checkBox_freenet, self.checkBox_lokinet)
        MainWindow.setTabOrder(self.checkBox_lokinet, self.checkBox_thorium)
        MainWindow.setTabOrder(self.checkBox_thorium, self.checkBox_tuntox)
        MainWindow.setTabOrder(self.checkBox_tuntox, self.checkBox_wireguard)
        MainWindow.setTabOrder(self.checkBox_wireguard, self.checkBox_httperf)
        MainWindow.setTabOrder(self.checkBox_httperf, self.checkBox_motrix)
        MainWindow.setTabOrder(self.checkBox_motrix, self.checkBox_tor)
        MainWindow.setTabOrder(self.checkBox_tor, self.checkBox_vegeta)
        MainWindow.setTabOrder(self.checkBox_vegeta, self.checkBox_6tunnel)
        MainWindow.setTabOrder(self.checkBox_6tunnel, self.checkBox_aide)
        MainWindow.setTabOrder(self.checkBox_aide, self.checkBox_gnupg)
        MainWindow.setTabOrder(self.checkBox_gnupg, self.checkBox_metaplsoit)
        MainWindow.setTabOrder(self.checkBox_metaplsoit, self.checkBox_ossec)
        MainWindow.setTabOrder(self.checkBox_ossec, self.checkBox_snort)
        MainWindow.setTabOrder(self.checkBox_snort, self.checkBox_tiger)
        MainWindow.setTabOrder(self.checkBox_tiger, self.checkBox_zeek)
        MainWindow.setTabOrder(self.checkBox_zeek, self.checkBox_bitwarden)
        MainWindow.setTabOrder(self.checkBox_bitwarden, self.checkBox_kgpg)
        MainWindow.setTabOrder(self.checkBox_kgpg, self.checkBox_ngrep)
        MainWindow.setTabOrder(self.checkBox_ngrep, self.checkBox_rootkit)
        MainWindow.setTabOrder(self.checkBox_rootkit, self.checkBox_sshGuard)
        MainWindow.setTabOrder(self.checkBox_sshGuard, self.checkBox_wireshark)
        MainWindow.setTabOrder(self.checkBox_wireshark, self.checkBox_clamav)
        MainWindow.setTabOrder(self.checkBox_clamav, self.checkBox_masshash)
        MainWindow.setTabOrder(self.checkBox_masshash, self.checkBox_nmap)
        MainWindow.setTabOrder(self.checkBox_nmap, self.checkBox_scrypt)
        MainWindow.setTabOrder(self.checkBox_scrypt, self.checkBox_steghide)
        MainWindow.setTabOrder(self.checkBox_steghide, self.checkBox_xplico)
        MainWindow.setTabOrder(self.checkBox_xplico, self.checkBox_abiword)
        MainWindow.setTabOrder(self.checkBox_abiword, self.checkBox_gscan2pdf)
        MainWindow.setTabOrder(self.checkBox_gscan2pdf, self.checkBox_onlyoffice)
        MainWindow.setTabOrder(self.checkBox_onlyoffice, self.checkBox_xmind)
        MainWindow.setTabOrder(self.checkBox_xmind, self.checkBox_cherrytree)
        MainWindow.setTabOrder(self.checkBox_cherrytree, self.checkBox_marktext)
        MainWindow.setTabOrder(self.checkBox_marktext, self.checkBox_texstudio)
        MainWindow.setTabOrder(self.checkBox_texstudio, self.checkBox_geany)
        MainWindow.setTabOrder(self.checkBox_geany, self.checkBox_micro)
        MainWindow.setTabOrder(self.checkBox_micro, self.checkBox_tikzit)
        MainWindow.setTabOrder(self.checkBox_tikzit, self.checkBox_birdfont)
        MainWindow.setTabOrder(self.checkBox_birdfont, self.checkBox_figma)
        MainWindow.setTabOrder(self.checkBox_figma, self.checkBox_imageMagick)
        MainWindow.setTabOrder(self.checkBox_imageMagick, self.checkBox_nomacs)
        MainWindow.setTabOrder(self.checkBox_nomacs, self.checkBox_waifu2x)
        MainWindow.setTabOrder(self.checkBox_waifu2x, self.checkBox_blender)
        MainWindow.setTabOrder(self.checkBox_blender, self.checkBox_gimp)
        MainWindow.setTabOrder(self.checkBox_gimp, self.checkBox_impgg)
        MainWindow.setTabOrder(self.checkBox_impgg, self.checkBox_snappy)
        MainWindow.setTabOrder(self.checkBox_snappy, self.checkBox_coulr)
        MainWindow.setTabOrder(self.checkBox_coulr, self.checkBox_gwenview)
        MainWindow.setTabOrder(self.checkBox_gwenview, self.checkBox_inkscape)
        MainWindow.setTabOrder(self.checkBox_inkscape, self.checkBox_synfig)
        MainWindow.setTabOrder(self.checkBox_synfig, self.checkBox_bazel)
        MainWindow.setTabOrder(self.checkBox_bazel, self.checkBox_fontManager)
        MainWindow.setTabOrder(self.checkBox_fontManager, self.checkBox_kitty)
        MainWindow.setTabOrder(self.checkBox_kitty, self.checkBox_miniconda)
        MainWindow.setTabOrder(self.checkBox_miniconda, self.checkBox_okular)
        MainWindow.setTabOrder(self.checkBox_okular, self.checkBox_vscode)
        MainWindow.setTabOrder(self.checkBox_vscode, self.checkBox_cairo)
        MainWindow.setTabOrder(self.checkBox_cairo, self.checkBox_gparted)
        MainWindow.setTabOrder(self.checkBox_gparted, self.checkBox_krusader)
        MainWindow.setTabOrder(self.checkBox_krusader, self.checkBox_meson)
        MainWindow.setTabOrder(self.checkBox_meson, self.checkBox_rsync)
        MainWindow.setTabOrder(self.checkBox_rsync, self.checkBox_NPM)
        MainWindow.setTabOrder(self.checkBox_NPM, self.checkBox_dolphin)
        MainWindow.setTabOrder(self.checkBox_dolphin, self.checkBox_gradle)
        MainWindow.setTabOrder(self.checkBox_gradle, self.checkBox_latteDock)
        MainWindow.setTabOrder(self.checkBox_latteDock, self.checkBox_ohMyZsh)
        MainWindow.setTabOrder(self.checkBox_ohMyZsh, self.checkBox_vmware)
        MainWindow.setTabOrder(self.checkBox_vmware, self.checkBox_onedrive)
        MainWindow.setTabOrder(self.checkBox_onedrive, self.pushButton_back2)
        MainWindow.setTabOrder(self.pushButton_back2, self.pushButton_next2)
        MainWindow.setTabOrder(self.pushButton_next2, self.logView)
        MainWindow.setTabOrder(self.logView, self.pushButton_finish)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_start.setText(_translate("MainWindow", "Start"))
        self.label_language.setText(_translate("MainWindow", "Language"))
        self.label_timezone.setText(_translate("MainWindow", "Timezone"))
        self.label_desktopEnvironment.setText(_translate("MainWindow", "Desktop Environment"))
        self.label_displayManager.setText(_translate("MainWindow", "Display Manager"))
        self.label_kernel.setText(_translate("MainWindow", "Kernel"))
        self.pushButton_exit.setText(_translate("MainWindow", "Exit"))
        self.pushButton_next.setText(_translate("MainWindow", "Next"))
        self.label_hostname.setText(_translate("MainWindow", "Hostname"))
        self.label_username.setText(_translate("MainWindow", "Username"))
        self.groupBox_2.setTitle(_translate("MainWindow", "User Password"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Root Password´"))
        self.label_efi.setText(_translate("MainWindow", "EFI Partition"))
        self.label_swap.setText(_translate("MainWindow", "Swap Partition"))
        self.label_root.setText(_translate("MainWindow", "Root Partition"))
        self.checkBox_chrome.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Proprietary web browser developed by Google</span></p></body></html>"))
        self.checkBox_chrome.setText(_translate("MainWindow", "Chrome"))
        self.checkBox_jdownloader.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Java-based downloader for one-click hosting sites</span></p></body></html>"))
        self.checkBox_jdownloader.setText(_translate("MainWindow", "JDownloader"))
        self.checkBox_openvpn.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">To connect to OpenVPN VPNs</span></p></body></html>"))
        self.checkBox_openvpn.setText(_translate("MainWindow", "OpenVPN"))
        self.checkBox_trojan.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">An unidentifiable mechanism that helps you bypass GFW</span></p></body></html>"))
        self.checkBox_trojan.setText(_translate("MainWindow", "Trojan"))
        self.checkBox_v2ray.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">V2Ray is the core of Project V, which is a set of tools to help you build your own privacy network over the internet</span></p></body></html>"))
        self.checkBox_v2ray.setText(_translate("MainWindow", "V2Ray"))
        self.checkBox_freenet.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">An encrypted network without censorship</span></p></body></html>"))
        self.checkBox_freenet.setText(_translate("MainWindow", "Freenet"))
        self.checkBox_lokinet.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Anonymous, decentralized and IP based overlay network for the internet</span></p></body></html>"))
        self.checkBox_lokinet.setText(_translate("MainWindow", "Lokinet"))
        self.checkBox_thorium.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Thorium develops a periodically synchronized fork of the Chromium browser, expanded with additional patches to optimize performance, improve usability and enhance security. According to the developers\' tests Thorium is 8-40% ahead of the regular Chromium, mainly due to the inclusion of additional optimizations during compilation</span></p></body></html>"))
        self.checkBox_thorium.setText(_translate("MainWindow", "Thorium"))
        self.checkBox_tuntox.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Tunnel TCP connections over the Tox protocol</span></p></body></html>"))
        self.checkBox_tuntox.setText(_translate("MainWindow", "Tuntox"))
        self.checkBox_wireguard.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Next generation secure network tunnel</span></p></body></html>"))
        self.checkBox_wireguard.setText(_translate("MainWindow", "WireGuard"))
        self.checkBox_httperf.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Can generate various HTTP workloads, written in C</span></p></body></html>"))
        self.checkBox_httperf.setText(_translate("MainWindow", "httperf"))
        self.checkBox_motrix.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Full-featured download manager that supports downloading HTTP, FTP, BitTorrent, Magnet, etc. Based on the Electron platform</span></p></body></html>"))
        self.checkBox_motrix.setText(_translate("MainWindow", "Motrix"))
        self.checkBox_tor.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Anonymizing overlay network</span></p></body></html>"))
        self.checkBox_tor.setText(_translate("MainWindow", "Tor"))
        self.checkBox_vegeta.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">HTTP load testing tool, written in Go</span></p></body></html>"))
        self.checkBox_vegeta.setText(_translate("MainWindow", "Vegeta"))
        self.checkBox_6tunnel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Tunnels IPv6 connections for IPv4-only applications</span></p></body></html>"))
        self.checkBox_6tunnel.setText(_translate("MainWindow", "6tunnel"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_network), _translate("MainWindow", "Network Applications"))
        self.checkBox_aide.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">File and directory integrity checker</span></p></body></html>"))
        self.checkBox_aide.setText(_translate("MainWindow", "AIDE"))
        self.checkBox_gnupg.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">The GNU project\'s complete and free implementation of the OpenPGP standard as defined by RFC4880. Free and Open Source replacement of PGP, mostly used for digital signing of packages</span></p></body></html>"))
        self.checkBox_gnupg.setText(_translate("MainWindow", "GnuPG"))
        self.checkBox_metaplsoit.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">An advanced open-source platform for developing, testing, and using exploit code</span></p></body></html>"))
        self.checkBox_metaplsoit.setText(_translate("MainWindow", "Metasploit"))
        self.checkBox_ossec.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Open Source Host-based Intrusion Detection System that performs log analysis, file integrity checking, policy monitoring, rootkit detection, real-time alerting and active response</span></p></body></html>"))
        self.checkBox_ossec.setText(_translate("MainWindow", "OSSEC"))
        self.checkBox_snort.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Network intrusion prevention and detection system</span></p></body></html>"))
        self.checkBox_snort.setText(_translate("MainWindow", "Snort"))
        self.checkBox_tiger.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Security tool that can be used both as a security audit and intrusion detection system</span></p></body></html>"))
        self.checkBox_tiger.setText(_translate("MainWindow", "Tiger"))
        self.checkBox_zeek.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Powerful network analysis framework that is much different from the typical IDS you may know</span></p></body></html>"))
        self.checkBox_zeek.setText(_translate("MainWindow", "Zeek"))
        self.checkBox_bitwarden.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Open source password manager with desktop, mobile, browser, and CLI versions. Cloud or self-hosted</span></p></body></html>"))
        self.checkBox_bitwarden.setText(_translate("MainWindow", "Bitwarden"))
        self.checkBox_kgpg.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Simple interface for GnuPG, for KDE</span></p></body></html>"))
        self.checkBox_kgpg.setText(_translate("MainWindow", "KGpg"))
        self.checkBox_ngrep.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">grep-like utility that allows you to search for network packets on an interface</span></p></body></html>"))
        self.checkBox_ngrep.setText(_translate("MainWindow", "Ngrep"))
        self.checkBox_rootkit.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Checks machines for the presence of rootkits and other unwanted tools</span></p></body></html>"))
        self.checkBox_rootkit.setText(_translate("MainWindow", "Rootkit Hunter"))
        self.checkBox_sshGuard.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Daemon that protects SSH and other services against brute-force attacks, similar to Fail2ban</span></p></body></html>"))
        self.checkBox_sshGuard.setText(_translate("MainWindow", "SSH Guard"))
        self.checkBox_wireshark.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Network protocol analyzer that lets you capture and interactively browse the traffic running on a computer network</span></p></body></html>"))
        self.checkBox_wireshark.setText(_translate("MainWindow", "Wireshark"))
        self.checkBox_clamav.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Open source antivirus engine for detecting trojans, viruses, malware &amp; other malicious threats</span></p></body></html>"))
        self.checkBox_clamav.setText(_translate("MainWindow", "ClamAV/Tk"))
        self.checkBox_masshash.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">A set of file hashing tools (both CLI and GTK GUI) written in Python. Supported algorithms include MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512</span></p></body></html>"))
        self.checkBox_masshash.setText(_translate("MainWindow", "MassHash"))
        self.checkBox_nmap.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Security scanner used to discover hosts and services on a computer network, thus creating a &quot;map&quot; of the network</span></p></body></html>"))
        self.checkBox_nmap.setText(_translate("MainWindow", "Nmap"))
        self.checkBox_scrypt.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Command-line encryption utility featuring the memory-hardened <span style=\" font-family:\'monospace\';\">scrypt</span> key derivation function</span></p></body></html>"))
        self.checkBox_scrypt.setText(_translate("MainWindow", "Scrypt"))
        self.checkBox_steghide.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">A steganography utility that is able to hide data in various kinds of image and audio files</span></p></body></html>"))
        self.checkBox_steghide.setText(_translate("MainWindow", "StegHide"))
        self.checkBox_xplico.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Network forensics analysis tool (NFAT), which is a software that reconstructs the contents of acquisitions performed with a packet sniffer</span></p></body></html>"))
        self.checkBox_xplico.setText(_translate("MainWindow", "Xplico"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_security), _translate("MainWindow", "Security Applications"))
        self.checkBox_abiword.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Full-featured word processor.</span></p></body></html>"))
        self.checkBox_abiword.setText(_translate("MainWindow", "Abiword"))
        self.checkBox_gscan2pdf.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Scans, runs an OCR engine, minor post-processing, creates a document</span></p></body></html>"))
        self.checkBox_gscan2pdf.setText(_translate("MainWindow", "gscan2pdf"))
        self.checkBox_onlyoffice.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Office suite that combines text, spreadsheet and presentation editors</span></p></body></html>"))
        self.checkBox_onlyoffice.setText(_translate("MainWindow", "OnlyOffice"))
        self.checkBox_xmind.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Brainstorming and mind mapping application. It provides a rich set of different visualization styles, and allows sharing of created mind maps via their website</span></p></body></html>"))
        self.checkBox_xmind.setText(_translate("MainWindow", "XMind"))
        self.checkBox_cherrytree.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Hierarchical note taking application, featuring rich text and syntax highlighting, storing data in a single xml or sqlite file</span></p></body></html>"))
        self.checkBox_cherrytree.setText(_translate("MainWindow", "Cherrytree"))
        self.checkBox_marktext.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Next generation markdown editor. Based on the <a href=\"https://electronjs.org/\"><span style=\" text-decoration: underline; color:#0000ff;\">Electron</span></a> platform</span></p></body></html>"))
        self.checkBox_marktext.setText(_translate("MainWindow", "Mark Text"))
        self.checkBox_texstudio.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Fork of TeXMaker including support for code completion of bibtex items, grammar check and automatic detection of the need for multiple LaTeX runs</span></p></body></html>"))
        self.checkBox_texstudio.setText(_translate("MainWindow", "TexStudio"))
        self.checkBox_geany.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Small and lightweight IDE with many supported many programming and markup languages including C, Java, PHP, HTML, Python, Perl, Pascal</span></p></body></html>"))
        self.checkBox_geany.setText(_translate("MainWindow", "Geany"))
        self.checkBox_micro.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Modern and intuitive terminal-based text editor, written in go and extensible through plugins</span></p></body></html>"))
        self.checkBox_micro.setText(_translate("MainWindow", "Micro"))
        self.checkBox_tikzit.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Graphical tool for rapidly creating graphs and diagrams using PGF/TikZ</span></p></body></html>"))
        self.checkBox_tikzit.setText(_translate("MainWindow", "TikZiT"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_docs), _translate("MainWindow", "Docs & Text Applications"))
        self.checkBox_birdfont.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Font editor which lets you create vector graphics and export TTF, EOT and SVG fonts</span></p></body></html>"))
        self.checkBox_birdfont.setText(_translate("MainWindow", "BirdFont"))
        self.checkBox_figma.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Unofficial desktop application for Figma collaborative design tool. Based on the Electron platform</span></p></body></html>"))
        self.checkBox_figma.setText(_translate("MainWindow", "Figma"))
        self.checkBox_imageMagick.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Image Magick</span></p></body></html>"))
        self.checkBox_imageMagick.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Command-line image manipulation program. It is known for its accurate format conversions with support for over 100 formats. Its API enables it to be scripted and it is usually used as a backend processor</span></p></body></html>"))
        self.checkBox_imageMagick.setText(_translate("MainWindow", "Image M."))
        self.checkBox_nomacs.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Qt image viewer. It is feature-rich but starts fast and can be configured to show additional widgets or only the image</span></p></body></html>"))
        self.checkBox_nomacs.setText(_translate("MainWindow", "nomacs"))
        self.checkBox_waifu2x.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Image Super-Resolution for Anime-style art using Deep Convolutional Neural Networks</span></p></body></html>"))
        self.checkBox_waifu2x.setText(_translate("MainWindow", "Waifu2x"))
        self.checkBox_blender.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Fully integrated 3D graphics creation suite with a built-in non-linear video editor</span></p></body></html>"))
        self.checkBox_blender.setText(_translate("MainWindow", "Blender"))
        self.checkBox_gimp.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Set of GIMP plugins for astronomical image processing</span></p></body></html>"))
        self.checkBox_gimp.setText(_translate("MainWindow", "GIMP"))
        self.checkBox_impgg.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">performs Lucy-Richardson deconvolution, unsharp masking, brightness normalization and tone curve adjustment</span></p></body></html>"))
        self.checkBox_impgg.setText(_translate("MainWindow", "imppg"))
        self.checkBox_snappy.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Powerful media player with a minimalistic interface that uses GStreamer</span></p></body></html>"))
        self.checkBox_snappy.setText(_translate("MainWindow", "Snappy"))
        self.checkBox_coulr.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Color box to help developers and designers</span></p></body></html>"))
        self.checkBox_coulr.setText(_translate("MainWindow", "Coulr"))
        self.checkBox_gwenview.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Fast and easy to use image viewer for the KDE desktop with optional dependencies for additional format support</span></p></body></html>"))
        self.checkBox_gwenview.setText(_translate("MainWindow", "GwenView"))
        self.checkBox_inkscape.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Vector graphics editor, with capabilities similar to Illustrator, CorelDraw, or Xara X, using the SVG (Scalable Vector Graphics) file format</span></p></body></html>"))
        self.checkBox_inkscape.setText(_translate("MainWindow", "Inkscape"))
        self.checkBox_synfig.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">2D animation software, designed as powerful industrial-strength solution for creating film-quality animation using a vector and bitmap artwork</span></p></body></html>"))
        self.checkBox_synfig.setText(_translate("MainWindow", "Synfig Studio"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_multimedia), _translate("MainWindow", "Multimedia Applications"))
        self.checkBox_bazel.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">An open-source tool that allows for the automated building and testing of software</span></p></body></html>"))
        self.checkBox_bazel.setText(_translate("MainWindow", "Bazel"))
        self.checkBox_fontManager.setText(_translate("MainWindow", "Font M."))
        self.checkBox_kitty.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">A modern, hackable, featureful, OpenGL based terminal emulator</span></p></body></html>"))
        self.checkBox_kitty.setText(_translate("MainWindow", "Kitty"))
        self.checkBox_miniconda.setText(_translate("MainWindow", "Miniconda"))
        self.checkBox_okular.setText(_translate("MainWindow", "Okular"))
        self.checkBox_vscode.setText(_translate("MainWindow", "VSCode"))
        self.checkBox_cairo.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Highly customizable dock and launcher application</span></p></body></html>"))
        self.checkBox_cairo.setText(_translate("MainWindow", "Cairo Dock"))
        self.checkBox_gparted.setText(_translate("MainWindow", "GParted"))
        self.checkBox_krusader.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Advanced twin panel (Midnight Commander style) file manager for the KDE desktop</span></p></body></html>"))
        self.checkBox_krusader.setText(_translate("MainWindow", "Krusader"))
        self.checkBox_meson.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Extremely fast and user friendly build system</span></p></body></html>"))
        self.checkBox_meson.setText(_translate("MainWindow", "Meson"))
        self.checkBox_rsync.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">File transfer program that uses the &quot;rsync algorithm&quot; which provides a very fast method for bringing remote files into sync. It does this by sending just the differences in the files across the link, without requiring that both sets of files are present at one of the ends of the link beforehand</span></p></body></html>"))
        self.checkBox_rsync.setText(_translate("MainWindow", "Rsync"))
        self.checkBox_NPM.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Simple terminal emulator for the X Window System. It provides DEC VT102 and Tektronix 4014 compatible terminals for programs that cannot use the window system directly</span></p></body></html>"))
        self.checkBox_NPM.setText(_translate("MainWindow", "NPM"))
        self.checkBox_dolphin.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">File manager included in the KDE desktop</span></p></body></html>"))
        self.checkBox_dolphin.setText(_translate("MainWindow", "Dolphin"))
        self.checkBox_gradle.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Powerful build system for the JVM</span></p></body></html>"))
        self.checkBox_gradle.setText(_translate("MainWindow", "Gradle"))
        self.checkBox_latteDock.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" color:#000000;\">Dock based on Plasma frameworks that provides an elegant and intuitive experience for your tasks and plasmoids.</span></p></body></html>"))
        self.checkBox_latteDock.setText(_translate("MainWindow", "Latte Dock"))
        self.checkBox_ohMyZsh.setText(_translate("MainWindow", "Oh-My-Zsh"))
        self.checkBox_vmware.setText(_translate("MainWindow", "VMWare"))
        self.checkBox_onedrive.setText(_translate("MainWindow", "Onedrive"))
        self.lineEdit_hostname.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-style:italic; color:#c01c28;\">* First character must be lowercase</span></p><p><span style=\" font-style:italic; color:#c01c28;\">* Only Alphanumeric</span></p><p><span style=\" font-style:italic; color:#c01c28;\">* Min. length is 4, Max. length is 12</span></p></body></html>"))
        self.lineEdit_username.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-style:italic; color:#c01c28;\">* First character must be lowercase</span></p><p><span style=\" font-style:italic; color:#c01c28;\">* Only Alphanumeric</span></p><p><span style=\" font-style:italic; color:#c01c28;\">* Min. length is 4, Max. length is 12</span></p></body></html>"))
        self.lineEdit_rpasswd.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-style:italic; color:#c01c28;\">* Min. length is 1</span></p><p><span style=\" font-style:italic; color:#c01c28;\">* All characters are allowed</span></p></body></html>"))
        self.lineEdit_upasswd.setToolTip(_translate("MainWindow", "<html><head/><body><p><span style=\" font-style:italic; color:#c01c28;\">* Min. length is 1</span></p><p><span style=\" font-style:italic; color:#c01c28;\">* All characters are allowed</span></p></body></html>"))
        self.tabWidget.setTabToolTip(self.tabWidget.indexOf(self.tab_utilities), _translate("MainWindow", "Utility Applications"))
        self.pushButton_back2.setText(_translate("MainWindow", "Back"))
        self.pushButton_next2.setText(_translate("MainWindow", "Next"))
        self.pushButton_finish.setText(_translate("MainWindow", "Finish"))
        
        self.optionals = {
            self.checkBox_chrome, self.checkBox_jdownloader,
            self.checkBox_openvpn, self.checkBox_trojan,
            self.checkBox_v2ray, self.checkBox_freenet,
            self.checkBox_lokinet, self.checkBox_thorium, 
            self.checkBox_tuntox, self.checkBox_wireguard,
            self.checkBox_httperf, self.checkBox_motrix,
            self.checkBox_tor, self.checkBox_vegeta,
            self.checkBox_6tunnel, self.checkBox_aide,
            self.checkBox_gnupg, self.checkBox_onedrive,
            self.checkBox_metaplsoit, self.checkBox_ossec,
            self.checkBox_snort, self.checkBox_tiger,
            self.checkBox_zeek, self.checkBox_bitwarden,
            self.checkBox_kgpg, self.checkBox_ngrep,
            self.checkBox_rootkit, self.checkBox_sshGuard,
            self.checkBox_wireshark, self.checkBox_clamav,
            self.checkBox_masshash,self.checkBox_nmap,
            self.checkBox_scrypt, self.checkBox_steghide,
            self.checkBox_xplico, self.checkBox_abiword,
            self.checkBox_gscan2pdf,self.checkBox_onlyoffice,
            self.checkBox_xmind, self.checkBox_cherrytree,
            self.checkBox_marktext, self.checkBox_texstudio,
            self.checkBox_geany, self.checkBox_micro,
            self.checkBox_tikzit, self.checkBox_birdfont,
            self.checkBox_figma, self.checkBox_imageMagick,
            self.checkBox_nomacs, self.checkBox_waifu2x,
            self.checkBox_blender, self.checkBox_gimp,
            self.checkBox_impgg, self.checkBox_snappy,
            self.checkBox_coulr, self.checkBox_gwenview,
            self.checkBox_inkscape, self.checkBox_synfig,
            self.checkBox_bazel, self.checkBox_fontManager,
            self.checkBox_kitty, self.checkBox_miniconda,
            self.checkBox_okular, self.checkBox_vscode,
            self.checkBox_cairo, self.checkBox_gparted,
            self.checkBox_snappy, self.checkBox_krusader,
            self.checkBox_meson, self.checkBox_rsync,
            self.checkBox_NPM, self.checkBox_dolphin,
            self.checkBox_gradle, self.checkBox_latteDock,
            self.checkBox_ohMyZsh, self.checkBox_vmware
        }
